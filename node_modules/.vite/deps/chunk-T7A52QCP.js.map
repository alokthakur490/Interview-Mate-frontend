{
  "version": 3,
  "sources": ["../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js", "../../@mui/material/styles/useThemeProps.js", "../../@mui/material/styles/ThemeProvider.js", "../../@mui/material/styles/ThemeProviderNoVars.js", "../../@mui/material/styles/ThemeProviderWithVars.js", "../../@mui/material/InitColorSchemeScript/InitColorSchemeScript.js"],
  "sourcesContent": ["function _objectWithoutPropertiesLoose(r, e) {\r\n  if (null == r) return {};\r\n  var t = {};\r\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\r\n    if (e.includes(n)) continue;\r\n    t[n] = r[n];\r\n  }\r\n  return t;\r\n}\r\nexport { _objectWithoutPropertiesLoose as default };", "'use client';\r\n\r\nimport systemUseThemeProps from '@mui/system/useThemeProps';\r\nimport defaultTheme from \"./defaultTheme.js\";\r\nimport THEME_ID from \"./identifier.js\";\r\nexport default function useThemeProps({\r\n  props,\r\n  name\r\n}) {\r\n  return systemUseThemeProps({\r\n    props,\r\n    name,\r\n    defaultTheme,\r\n    themeId: THEME_ID\r\n  });\r\n}", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport ThemeProviderNoVars from \"./ThemeProviderNoVars.js\";\r\nimport { CssVarsProvider } from \"./ThemeProviderWithVars.js\";\r\nimport THEME_ID from \"./identifier.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport default function ThemeProvider({\r\n  theme,\r\n  ...props\r\n}) {\r\n  if (typeof theme === 'function') {\r\n    return /*#__PURE__*/_jsx(ThemeProviderNoVars, {\r\n      theme: theme,\r\n      ...props\r\n    });\r\n  }\r\n  const muiTheme = THEME_ID in theme ? theme[THEME_ID] : theme;\r\n  if (!('colorSchemes' in muiTheme)) {\r\n    return /*#__PURE__*/_jsx(ThemeProviderNoVars, {\r\n      theme: theme,\r\n      ...props\r\n    });\r\n  }\r\n  return /*#__PURE__*/_jsx(CssVarsProvider, {\r\n    theme: theme,\r\n    ...props\r\n  });\r\n}", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { ThemeProvider as SystemThemeProvider } from '@mui/system';\r\nimport THEME_ID from \"./identifier.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport default function ThemeProviderNoVars({\r\n  theme: themeInput,\r\n  ...props\r\n}) {\r\n  const scopedTheme = THEME_ID in themeInput ? themeInput[THEME_ID] : undefined;\r\n  return /*#__PURE__*/_jsx(SystemThemeProvider, {\r\n    ...props,\r\n    themeId: scopedTheme ? THEME_ID : undefined,\r\n    theme: scopedTheme || themeInput\r\n  });\r\n}", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\r\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\r\nimport createTheme from \"./createTheme.js\";\r\nimport createTypography from \"./createTypography.js\";\r\nimport THEME_ID from \"./identifier.js\";\r\nimport { defaultConfig } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst {\r\n  CssVarsProvider: InternalCssVarsProvider,\r\n  useColorScheme,\r\n  getInitColorSchemeScript: deprecatedGetInitColorSchemeScript\r\n} = createCssVarsProvider({\r\n  themeId: THEME_ID,\r\n  // @ts-ignore ignore module augmentation tests\r\n  theme: () => createTheme({\r\n    cssVariables: true\r\n  }),\r\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\r\n  modeStorageKey: defaultConfig.modeStorageKey,\r\n  defaultColorScheme: {\r\n    light: defaultConfig.defaultLightColorScheme,\r\n    dark: defaultConfig.defaultDarkColorScheme\r\n  },\r\n  resolveTheme: theme => {\r\n    const newTheme = {\r\n      ...theme,\r\n      typography: createTypography(theme.palette, theme.typography)\r\n    };\r\n    newTheme.unstable_sx = function sx(props) {\r\n      return styleFunctionSx({\r\n        sx: props,\r\n        theme: this\r\n      });\r\n    };\r\n    return newTheme;\r\n  }\r\n});\r\nlet warnedOnce = false;\r\n\r\n// TODO: remove in v7\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction Experimental_CssVarsProvider(props) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!warnedOnce) {\r\n      console.warn(['MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.', '', \"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.\", 'For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/'].join('\\n'));\r\n      warnedOnce = true;\r\n    }\r\n  }\r\n  return /*#__PURE__*/_jsx(InternalCssVarsProvider, {\r\n    ...props\r\n  });\r\n}\r\nlet warnedInitScriptOnce = false;\r\n\r\n// TODO: remove in v7\r\nconst getInitColorSchemeScript = params => {\r\n  if (!warnedInitScriptOnce) {\r\n    console.warn(['MUI: The getInitColorSchemeScript function has been deprecated.', '', \"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`\", 'and replace the function call with `<InitColorSchemeScript />` instead.'].join('\\n'));\r\n    warnedInitScriptOnce = true;\r\n  }\r\n  return deprecatedGetInitColorSchemeScript(params);\r\n};\r\n\r\n/**\r\n * TODO: remove this export in v7\r\n * @deprecated\r\n * The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.\r\n *\r\n * You should use `ThemeProvider` and `createTheme()` instead:\r\n *\r\n * ```diff\r\n * - import { CssVarsProvider, extendTheme } from '@mui/material/styles';\r\n * + import { ThemeProvider, createTheme } from '@mui/material/styles';\r\n *\r\n * - const theme = extendTheme();\r\n * + const theme = createTheme({\r\n * +   cssVariables: true,\r\n * +   colorSchemes: { light: true, dark: true },\r\n * + });\r\n *\r\n * - <CssVarsProvider theme={theme}>\r\n * + <ThemeProvider theme={theme}>\r\n * ```\r\n *\r\n * To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.\r\n */\r\nexport const CssVarsProvider = InternalCssVarsProvider;\r\nexport { useColorScheme, getInitColorSchemeScript, Experimental_CssVarsProvider };", "import * as React from 'react';\r\nimport SystemInitColorSchemeScript from '@mui/system/InitColorSchemeScript';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const defaultConfig = {\r\n  attribute: 'data-mui-color-scheme',\r\n  colorSchemeStorageKey: 'mui-color-scheme',\r\n  defaultLightColorScheme: 'light',\r\n  defaultDarkColorScheme: 'dark',\r\n  modeStorageKey: 'mui-mode'\r\n};\r\nexport default (function InitColorSchemeScript(props) {\r\n  return /*#__PURE__*/_jsx(SystemInitColorSchemeScript, {\r\n    ...defaultConfig,\r\n    ...props\r\n  });\r\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,SAAS,8BAA8B,GAAG,GAAG;AAC3C,MAAI,QAAQ,EAAG,QAAO,CAAC;AACvB,MAAI,IAAI,CAAC;AACT,WAAS,KAAK,EAAG,KAAI,CAAC,EAAE,eAAe,KAAK,GAAG,CAAC,GAAG;AACjD,QAAI,EAAE,SAAS,CAAC,EAAG;AACnB,MAAE,CAAC,IAAI,EAAE,CAAC;AAAA,EACZ;AACA,SAAO;AACT;;;ACHe,SAARA,eAA+B;AAAA,EACpC;AAAA,EACA;AACF,GAAG;AACD,SAAO,cAAoB;AAAA,IACzB;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AACH;;;ACbA,IAAAC,SAAuB;;;ACAvB,YAAuB;AAGvB,yBAA4B;;;ACH5B,IAAAC,SAAuB;;;ACFvB,IAAAC,SAAuB;AAEvB,IAAAC,sBAA4B;AACrB,IAAM,gBAAgB;AAAA,EAC3B,WAAW;AAAA,EACX,uBAAuB;AAAA,EACvB,yBAAyB;AAAA,EACzB,wBAAwB;AAAA,EACxB,gBAAgB;AAClB;;;ADAA,IAAAC,sBAA4B;AAC5B,IAAM;AAAA,EACJ,iBAAiB;AAAA,EACjB;AAAA,EACA,0BAA0B;AAC5B,IAAI,sBAAsB;AAAA,EACxB,SAAS;AAAA;AAAA,EAET,OAAO,MAAM,YAAY;AAAA,IACvB,cAAc;AAAA,EAChB,CAAC;AAAA,EACD,uBAAuB,cAAc;AAAA,EACrC,gBAAgB,cAAc;AAAA,EAC9B,oBAAoB;AAAA,IAClB,OAAO,cAAc;AAAA,IACrB,MAAM,cAAc;AAAA,EACtB;AAAA,EACA,cAAc,WAAS;AACrB,UAAM,WAAW;AAAA,MACf,GAAG;AAAA,MACH,YAAY,iBAAiB,MAAM,SAAS,MAAM,UAAU;AAAA,IAC9D;AACA,aAAS,cAAc,SAAS,GAAG,OAAO;AACxC,aAAO,wBAAgB;AAAA,QACrB,IAAI;AAAA,QACJ,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AACF,CAAC;;;AFjCD,IAAAC,sBAA4B;",
  "names": ["useThemeProps", "React", "React", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime"]
}
